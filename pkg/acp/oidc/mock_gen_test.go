// Code generated by mocktail; DO NOT EDIT.

package oidc

import (
	"context"
	"net/http"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// oAuthProviderMock mock of OAuthProvider.
type oAuthProviderMock struct{ mock.Mock }

// newOAuthProviderMock creates a new oAuthProviderMock.
func newOAuthProviderMock(tb testing.TB) *oAuthProviderMock {
	tb.Helper()

	m := &oAuthProviderMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *oAuthProviderMock) AuthCodeURL(aParam string, bParam ...oauth2.AuthCodeOption) string {
	_ret := _m.Called(aParam, bParam)

	if _rf, ok := _ret.Get(0).(func(string, ...oauth2.AuthCodeOption) string); ok {
		return _rf(aParam, bParam...)
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *oAuthProviderMock) OnAuthCodeURL(aParam string, bParam ...oauth2.AuthCodeOption) *oAuthProviderAuthCodeURLCall {
	return &oAuthProviderAuthCodeURLCall{Call: _m.Mock.On("AuthCodeURL", aParam, bParam), Parent: _m}
}

func (_m *oAuthProviderMock) OnAuthCodeURLRaw(aParam interface{}, bParam interface{}) *oAuthProviderAuthCodeURLCall {
	return &oAuthProviderAuthCodeURLCall{Call: _m.Mock.On("AuthCodeURL", aParam, bParam), Parent: _m}
}

type oAuthProviderAuthCodeURLCall struct {
	*mock.Call
	Parent *oAuthProviderMock
}

func (_c *oAuthProviderAuthCodeURLCall) Panic(msg string) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) Once() *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) Twice() *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) Times(i int) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) WaitUntil(w <-chan time.Time) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) After(d time.Duration) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) Run(fn func(args mock.Arguments)) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) Maybe() *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) TypedReturns(a string) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) ReturnsFn(fn func(string, ...oauth2.AuthCodeOption) string) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) TypedRun(fn func(string, ...oauth2.AuthCodeOption)) *oAuthProviderAuthCodeURLCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam := args.String(0)
		_bParam, _ := args.Get(1).([]oauth2.AuthCodeOption)
		fn(_aParam, _bParam...)
	})
	return _c
}

func (_c *oAuthProviderAuthCodeURLCall) OnAuthCodeURL(aParam string, bParam ...oauth2.AuthCodeOption) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURL(aParam, bParam...)
}

func (_c *oAuthProviderAuthCodeURLCall) OnExchange(bParam string, cParam ...oauth2.AuthCodeOption) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchange(bParam, cParam...)
}

func (_c *oAuthProviderAuthCodeURLCall) OnTokenSource(t *oauth2.Token) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSource(t)
}

func (_c *oAuthProviderAuthCodeURLCall) OnAuthCodeURLRaw(aParam interface{}, bParam interface{}) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURLRaw(aParam, bParam)
}

func (_c *oAuthProviderAuthCodeURLCall) OnExchangeRaw(bParam interface{}, cParam interface{}) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchangeRaw(bParam, cParam)
}

func (_c *oAuthProviderAuthCodeURLCall) OnTokenSourceRaw(t interface{}) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSourceRaw(t)
}

func (_m *oAuthProviderMock) Exchange(_ context.Context, bParam string, cParam ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	_ret := _m.Called(bParam, cParam)

	if _rf, ok := _ret.Get(0).(func(string, ...oauth2.AuthCodeOption) (*oauth2.Token, error)); ok {
		return _rf(bParam, cParam...)
	}

	_ra0, _ := _ret.Get(0).(*oauth2.Token)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *oAuthProviderMock) OnExchange(bParam string, cParam ...oauth2.AuthCodeOption) *oAuthProviderExchangeCall {
	return &oAuthProviderExchangeCall{Call: _m.Mock.On("Exchange", bParam, cParam), Parent: _m}
}

func (_m *oAuthProviderMock) OnExchangeRaw(bParam interface{}, cParam interface{}) *oAuthProviderExchangeCall {
	return &oAuthProviderExchangeCall{Call: _m.Mock.On("Exchange", bParam, cParam), Parent: _m}
}

type oAuthProviderExchangeCall struct {
	*mock.Call
	Parent *oAuthProviderMock
}

func (_c *oAuthProviderExchangeCall) Panic(msg string) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oAuthProviderExchangeCall) Once() *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oAuthProviderExchangeCall) Twice() *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oAuthProviderExchangeCall) Times(i int) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oAuthProviderExchangeCall) WaitUntil(w <-chan time.Time) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oAuthProviderExchangeCall) After(d time.Duration) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oAuthProviderExchangeCall) Run(fn func(args mock.Arguments)) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oAuthProviderExchangeCall) Maybe() *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oAuthProviderExchangeCall) TypedReturns(a *oauth2.Token, b error) *oAuthProviderExchangeCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *oAuthProviderExchangeCall) ReturnsFn(fn func(string, ...oauth2.AuthCodeOption) (*oauth2.Token, error)) *oAuthProviderExchangeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oAuthProviderExchangeCall) TypedRun(fn func(string, ...oauth2.AuthCodeOption)) *oAuthProviderExchangeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_bParam := args.String(0)
		_cParam, _ := args.Get(1).([]oauth2.AuthCodeOption)
		fn(_bParam, _cParam...)
	})
	return _c
}

func (_c *oAuthProviderExchangeCall) OnAuthCodeURL(aParam string, bParam ...oauth2.AuthCodeOption) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURL(aParam, bParam...)
}

func (_c *oAuthProviderExchangeCall) OnExchange(bParam string, cParam ...oauth2.AuthCodeOption) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchange(bParam, cParam...)
}

func (_c *oAuthProviderExchangeCall) OnTokenSource(t *oauth2.Token) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSource(t)
}

func (_c *oAuthProviderExchangeCall) OnAuthCodeURLRaw(aParam interface{}, bParam interface{}) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURLRaw(aParam, bParam)
}

func (_c *oAuthProviderExchangeCall) OnExchangeRaw(bParam interface{}, cParam interface{}) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchangeRaw(bParam, cParam)
}

func (_c *oAuthProviderExchangeCall) OnTokenSourceRaw(t interface{}) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSourceRaw(t)
}

func (_m *oAuthProviderMock) TokenSource(_ context.Context, t *oauth2.Token) oauth2.TokenSource {
	_ret := _m.Called(t)

	if _rf, ok := _ret.Get(0).(func(*oauth2.Token) oauth2.TokenSource); ok {
		return _rf(t)
	}

	_ra0, _ := _ret.Get(0).(oauth2.TokenSource)

	return _ra0
}

func (_m *oAuthProviderMock) OnTokenSource(t *oauth2.Token) *oAuthProviderTokenSourceCall {
	return &oAuthProviderTokenSourceCall{Call: _m.Mock.On("TokenSource", t), Parent: _m}
}

func (_m *oAuthProviderMock) OnTokenSourceRaw(t interface{}) *oAuthProviderTokenSourceCall {
	return &oAuthProviderTokenSourceCall{Call: _m.Mock.On("TokenSource", t), Parent: _m}
}

type oAuthProviderTokenSourceCall struct {
	*mock.Call
	Parent *oAuthProviderMock
}

func (_c *oAuthProviderTokenSourceCall) Panic(msg string) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) Once() *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *oAuthProviderTokenSourceCall) Twice() *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *oAuthProviderTokenSourceCall) Times(i int) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) WaitUntil(w <-chan time.Time) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) After(d time.Duration) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) Run(fn func(args mock.Arguments)) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) Maybe() *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *oAuthProviderTokenSourceCall) TypedReturns(a oauth2.TokenSource) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) ReturnsFn(fn func(*oauth2.Token) oauth2.TokenSource) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *oAuthProviderTokenSourceCall) TypedRun(fn func(*oauth2.Token)) *oAuthProviderTokenSourceCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_t, _ := args.Get(0).(*oauth2.Token)
		fn(_t)
	})
	return _c
}

func (_c *oAuthProviderTokenSourceCall) OnAuthCodeURL(aParam string, bParam []oauth2.AuthCodeOption) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURL(aParam, bParam...)
}

func (_c *oAuthProviderTokenSourceCall) OnExchange(bParam string, cParam []oauth2.AuthCodeOption) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchange(bParam, cParam...)
}

func (_c *oAuthProviderTokenSourceCall) OnTokenSource(t *oauth2.Token) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSource(t)
}

func (_c *oAuthProviderTokenSourceCall) OnAuthCodeURLRaw(aParam interface{}, bParam interface{}) *oAuthProviderAuthCodeURLCall {
	return _c.Parent.OnAuthCodeURLRaw(aParam, bParam)
}

func (_c *oAuthProviderTokenSourceCall) OnExchangeRaw(bParam interface{}, cParam interface{}) *oAuthProviderExchangeCall {
	return _c.Parent.OnExchangeRaw(bParam, cParam)
}

func (_c *oAuthProviderTokenSourceCall) OnTokenSourceRaw(t interface{}) *oAuthProviderTokenSourceCall {
	return _c.Parent.OnTokenSourceRaw(t)
}

// sessionStoreMock mock of SessionStore.
type sessionStoreMock struct{ mock.Mock }

// newSessionStoreMock creates a new sessionStoreMock.
func newSessionStoreMock(tb testing.TB) *sessionStoreMock {
	tb.Helper()

	m := &sessionStoreMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *sessionStoreMock) Create(aParam http.ResponseWriter, bParam SessionData) error {
	_ret := _m.Called(aParam, bParam)

	if _rf, ok := _ret.Get(0).(func(http.ResponseWriter, SessionData) error); ok {
		return _rf(aParam, bParam)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *sessionStoreMock) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return &sessionStoreCreateCall{Call: _m.Mock.On("Create", aParam, bParam), Parent: _m}
}

func (_m *sessionStoreMock) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return &sessionStoreCreateCall{Call: _m.Mock.On("Create", aParam, bParam), Parent: _m}
}

type sessionStoreCreateCall struct {
	*mock.Call
	Parent *sessionStoreMock
}

func (_c *sessionStoreCreateCall) Panic(msg string) *sessionStoreCreateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *sessionStoreCreateCall) Once() *sessionStoreCreateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *sessionStoreCreateCall) Twice() *sessionStoreCreateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *sessionStoreCreateCall) Times(i int) *sessionStoreCreateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *sessionStoreCreateCall) WaitUntil(w <-chan time.Time) *sessionStoreCreateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *sessionStoreCreateCall) After(d time.Duration) *sessionStoreCreateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *sessionStoreCreateCall) Run(fn func(args mock.Arguments)) *sessionStoreCreateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *sessionStoreCreateCall) Maybe() *sessionStoreCreateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *sessionStoreCreateCall) TypedReturns(a error) *sessionStoreCreateCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *sessionStoreCreateCall) ReturnsFn(fn func(http.ResponseWriter, SessionData) error) *sessionStoreCreateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *sessionStoreCreateCall) TypedRun(fn func(http.ResponseWriter, SessionData)) *sessionStoreCreateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(http.ResponseWriter)
		_bParam, _ := args.Get(1).(SessionData)
		fn(_aParam, _bParam)
	})
	return _c
}

func (_c *sessionStoreCreateCall) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return _c.Parent.OnCreate(aParam, bParam)
}

func (_c *sessionStoreCreateCall) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return _c.Parent.OnDelete(aParam, bParam)
}

func (_c *sessionStoreCreateCall) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return _c.Parent.OnGet(aParam)
}

func (_c *sessionStoreCreateCall) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookie(aParam)
}

func (_c *sessionStoreCreateCall) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdate(aParam, bParam, cParam)
}

func (_c *sessionStoreCreateCall) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return _c.Parent.OnCreateRaw(aParam, bParam)
}

func (_c *sessionStoreCreateCall) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return _c.Parent.OnDeleteRaw(aParam, bParam)
}

func (_c *sessionStoreCreateCall) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return _c.Parent.OnGetRaw(aParam)
}

func (_c *sessionStoreCreateCall) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookieRaw(aParam)
}

func (_c *sessionStoreCreateCall) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdateRaw(aParam, bParam, cParam)
}

func (_m *sessionStoreMock) Delete(aParam http.ResponseWriter, bParam *http.Request) error {
	_ret := _m.Called(aParam, bParam)

	if _rf, ok := _ret.Get(0).(func(http.ResponseWriter, *http.Request) error); ok {
		return _rf(aParam, bParam)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *sessionStoreMock) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return &sessionStoreDeleteCall{Call: _m.Mock.On("Delete", aParam, bParam), Parent: _m}
}

func (_m *sessionStoreMock) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return &sessionStoreDeleteCall{Call: _m.Mock.On("Delete", aParam, bParam), Parent: _m}
}

type sessionStoreDeleteCall struct {
	*mock.Call
	Parent *sessionStoreMock
}

func (_c *sessionStoreDeleteCall) Panic(msg string) *sessionStoreDeleteCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *sessionStoreDeleteCall) Once() *sessionStoreDeleteCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *sessionStoreDeleteCall) Twice() *sessionStoreDeleteCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *sessionStoreDeleteCall) Times(i int) *sessionStoreDeleteCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *sessionStoreDeleteCall) WaitUntil(w <-chan time.Time) *sessionStoreDeleteCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *sessionStoreDeleteCall) After(d time.Duration) *sessionStoreDeleteCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *sessionStoreDeleteCall) Run(fn func(args mock.Arguments)) *sessionStoreDeleteCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *sessionStoreDeleteCall) Maybe() *sessionStoreDeleteCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *sessionStoreDeleteCall) TypedReturns(a error) *sessionStoreDeleteCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *sessionStoreDeleteCall) ReturnsFn(fn func(http.ResponseWriter, *http.Request) error) *sessionStoreDeleteCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *sessionStoreDeleteCall) TypedRun(fn func(http.ResponseWriter, *http.Request)) *sessionStoreDeleteCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(http.ResponseWriter)
		_bParam, _ := args.Get(1).(*http.Request)
		fn(_aParam, _bParam)
	})
	return _c
}

func (_c *sessionStoreDeleteCall) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return _c.Parent.OnCreate(aParam, bParam)
}

func (_c *sessionStoreDeleteCall) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return _c.Parent.OnDelete(aParam, bParam)
}

func (_c *sessionStoreDeleteCall) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return _c.Parent.OnGet(aParam)
}

func (_c *sessionStoreDeleteCall) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookie(aParam)
}

func (_c *sessionStoreDeleteCall) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdate(aParam, bParam, cParam)
}

func (_c *sessionStoreDeleteCall) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return _c.Parent.OnCreateRaw(aParam, bParam)
}

func (_c *sessionStoreDeleteCall) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return _c.Parent.OnDeleteRaw(aParam, bParam)
}

func (_c *sessionStoreDeleteCall) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return _c.Parent.OnGetRaw(aParam)
}

func (_c *sessionStoreDeleteCall) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookieRaw(aParam)
}

func (_c *sessionStoreDeleteCall) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdateRaw(aParam, bParam, cParam)
}

func (_m *sessionStoreMock) Get(aParam *http.Request) (*SessionData, error) {
	_ret := _m.Called(aParam)

	if _rf, ok := _ret.Get(0).(func(*http.Request) (*SessionData, error)); ok {
		return _rf(aParam)
	}

	_ra0, _ := _ret.Get(0).(*SessionData)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *sessionStoreMock) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return &sessionStoreGetCall{Call: _m.Mock.On("Get", aParam), Parent: _m}
}

func (_m *sessionStoreMock) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return &sessionStoreGetCall{Call: _m.Mock.On("Get", aParam), Parent: _m}
}

type sessionStoreGetCall struct {
	*mock.Call
	Parent *sessionStoreMock
}

func (_c *sessionStoreGetCall) Panic(msg string) *sessionStoreGetCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *sessionStoreGetCall) Once() *sessionStoreGetCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *sessionStoreGetCall) Twice() *sessionStoreGetCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *sessionStoreGetCall) Times(i int) *sessionStoreGetCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *sessionStoreGetCall) WaitUntil(w <-chan time.Time) *sessionStoreGetCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *sessionStoreGetCall) After(d time.Duration) *sessionStoreGetCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *sessionStoreGetCall) Run(fn func(args mock.Arguments)) *sessionStoreGetCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *sessionStoreGetCall) Maybe() *sessionStoreGetCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *sessionStoreGetCall) TypedReturns(a *SessionData, b error) *sessionStoreGetCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *sessionStoreGetCall) ReturnsFn(fn func(*http.Request) (*SessionData, error)) *sessionStoreGetCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *sessionStoreGetCall) TypedRun(fn func(*http.Request)) *sessionStoreGetCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(*http.Request)
		fn(_aParam)
	})
	return _c
}

func (_c *sessionStoreGetCall) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return _c.Parent.OnCreate(aParam, bParam)
}

func (_c *sessionStoreGetCall) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return _c.Parent.OnDelete(aParam, bParam)
}

func (_c *sessionStoreGetCall) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return _c.Parent.OnGet(aParam)
}

func (_c *sessionStoreGetCall) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookie(aParam)
}

func (_c *sessionStoreGetCall) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdate(aParam, bParam, cParam)
}

func (_c *sessionStoreGetCall) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return _c.Parent.OnCreateRaw(aParam, bParam)
}

func (_c *sessionStoreGetCall) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return _c.Parent.OnDeleteRaw(aParam, bParam)
}

func (_c *sessionStoreGetCall) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return _c.Parent.OnGetRaw(aParam)
}

func (_c *sessionStoreGetCall) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookieRaw(aParam)
}

func (_c *sessionStoreGetCall) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdateRaw(aParam, bParam, cParam)
}

func (_m *sessionStoreMock) RemoveCookie(aParam *http.Request) {
	_m.Called(aParam)
}

func (_m *sessionStoreMock) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return &sessionStoreRemoveCookieCall{Call: _m.Mock.On("RemoveCookie", aParam), Parent: _m}
}

func (_m *sessionStoreMock) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return &sessionStoreRemoveCookieCall{Call: _m.Mock.On("RemoveCookie", aParam), Parent: _m}
}

type sessionStoreRemoveCookieCall struct {
	*mock.Call
	Parent *sessionStoreMock
}

func (_c *sessionStoreRemoveCookieCall) Panic(msg string) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *sessionStoreRemoveCookieCall) Once() *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *sessionStoreRemoveCookieCall) Twice() *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *sessionStoreRemoveCookieCall) Times(i int) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *sessionStoreRemoveCookieCall) WaitUntil(w <-chan time.Time) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *sessionStoreRemoveCookieCall) After(d time.Duration) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *sessionStoreRemoveCookieCall) Run(fn func(args mock.Arguments)) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *sessionStoreRemoveCookieCall) Maybe() *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *sessionStoreRemoveCookieCall) TypedRun(fn func(*http.Request)) *sessionStoreRemoveCookieCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(*http.Request)
		fn(_aParam)
	})
	return _c
}

func (_c *sessionStoreRemoveCookieCall) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return _c.Parent.OnCreate(aParam, bParam)
}

func (_c *sessionStoreRemoveCookieCall) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return _c.Parent.OnDelete(aParam, bParam)
}

func (_c *sessionStoreRemoveCookieCall) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return _c.Parent.OnGet(aParam)
}

func (_c *sessionStoreRemoveCookieCall) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookie(aParam)
}

func (_c *sessionStoreRemoveCookieCall) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdate(aParam, bParam, cParam)
}

func (_c *sessionStoreRemoveCookieCall) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return _c.Parent.OnCreateRaw(aParam, bParam)
}

func (_c *sessionStoreRemoveCookieCall) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return _c.Parent.OnDeleteRaw(aParam, bParam)
}

func (_c *sessionStoreRemoveCookieCall) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return _c.Parent.OnGetRaw(aParam)
}

func (_c *sessionStoreRemoveCookieCall) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookieRaw(aParam)
}

func (_c *sessionStoreRemoveCookieCall) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdateRaw(aParam, bParam, cParam)
}

func (_m *sessionStoreMock) Update(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) error {
	_ret := _m.Called(aParam, bParam, cParam)

	if _rf, ok := _ret.Get(0).(func(http.ResponseWriter, *http.Request, SessionData) error); ok {
		return _rf(aParam, bParam, cParam)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *sessionStoreMock) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return &sessionStoreUpdateCall{Call: _m.Mock.On("Update", aParam, bParam, cParam), Parent: _m}
}

func (_m *sessionStoreMock) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return &sessionStoreUpdateCall{Call: _m.Mock.On("Update", aParam, bParam, cParam), Parent: _m}
}

type sessionStoreUpdateCall struct {
	*mock.Call
	Parent *sessionStoreMock
}

func (_c *sessionStoreUpdateCall) Panic(msg string) *sessionStoreUpdateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *sessionStoreUpdateCall) Once() *sessionStoreUpdateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *sessionStoreUpdateCall) Twice() *sessionStoreUpdateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *sessionStoreUpdateCall) Times(i int) *sessionStoreUpdateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *sessionStoreUpdateCall) WaitUntil(w <-chan time.Time) *sessionStoreUpdateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *sessionStoreUpdateCall) After(d time.Duration) *sessionStoreUpdateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *sessionStoreUpdateCall) Run(fn func(args mock.Arguments)) *sessionStoreUpdateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *sessionStoreUpdateCall) Maybe() *sessionStoreUpdateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *sessionStoreUpdateCall) TypedReturns(a error) *sessionStoreUpdateCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *sessionStoreUpdateCall) ReturnsFn(fn func(http.ResponseWriter, *http.Request, SessionData) error) *sessionStoreUpdateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *sessionStoreUpdateCall) TypedRun(fn func(http.ResponseWriter, *http.Request, SessionData)) *sessionStoreUpdateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(http.ResponseWriter)
		_bParam, _ := args.Get(1).(*http.Request)
		_cParam, _ := args.Get(2).(SessionData)
		fn(_aParam, _bParam, _cParam)
	})
	return _c
}

func (_c *sessionStoreUpdateCall) OnCreate(aParam http.ResponseWriter, bParam SessionData) *sessionStoreCreateCall {
	return _c.Parent.OnCreate(aParam, bParam)
}

func (_c *sessionStoreUpdateCall) OnDelete(aParam http.ResponseWriter, bParam *http.Request) *sessionStoreDeleteCall {
	return _c.Parent.OnDelete(aParam, bParam)
}

func (_c *sessionStoreUpdateCall) OnGet(aParam *http.Request) *sessionStoreGetCall {
	return _c.Parent.OnGet(aParam)
}

func (_c *sessionStoreUpdateCall) OnRemoveCookie(aParam *http.Request) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookie(aParam)
}

func (_c *sessionStoreUpdateCall) OnUpdate(aParam http.ResponseWriter, bParam *http.Request, cParam SessionData) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdate(aParam, bParam, cParam)
}

func (_c *sessionStoreUpdateCall) OnCreateRaw(aParam interface{}, bParam interface{}) *sessionStoreCreateCall {
	return _c.Parent.OnCreateRaw(aParam, bParam)
}

func (_c *sessionStoreUpdateCall) OnDeleteRaw(aParam interface{}, bParam interface{}) *sessionStoreDeleteCall {
	return _c.Parent.OnDeleteRaw(aParam, bParam)
}

func (_c *sessionStoreUpdateCall) OnGetRaw(aParam interface{}) *sessionStoreGetCall {
	return _c.Parent.OnGetRaw(aParam)
}

func (_c *sessionStoreUpdateCall) OnRemoveCookieRaw(aParam interface{}) *sessionStoreRemoveCookieCall {
	return _c.Parent.OnRemoveCookieRaw(aParam)
}

func (_c *sessionStoreUpdateCall) OnUpdateRaw(aParam interface{}, bParam interface{}, cParam interface{}) *sessionStoreUpdateCall {
	return _c.Parent.OnUpdateRaw(aParam, bParam, cParam)
}
